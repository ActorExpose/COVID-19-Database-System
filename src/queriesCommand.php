<?php
include_once("dbConnection.php");
class QueriesCommand extends AbstractCommand {

    function __construct() {
        parent::__construct();
        $this->queryNumber = htmlspecialchars(trim($_POST["queryNumber"]));
    }

    public function execute() {
        $dbConn = new DBConnection();
        $conn = $dbConn->getConn();
        
        switch($this->queryNumber) {
            case "9": // Example args input format: MILR 8222 0222; 2021-01-10
                echo "9. Provide a detailed progress of all the symptoms for a given person who tested
                positive on a specific date. <br/><br/>";  
                if (empty($this->args[0])) {
                    echo "Missing medicare number and/or test result date.";
                    break;
                }             
                $query ="SELECT firstName, lastName, dateTimeOfSymptom, symptoms, testResultDate FROM SymptomsHistory, Person
                WHERE SymptomsHistory.testResultDate = '" . $this->args[1] . "' AND Person.id = SymptomsHistory.personId AND Person.medicareNumber = '" . $this->args[0] . "' AND SymptomsHistory.isDeleted = 0
                ORDER BY dateTimeOfSymptom;";
                $result = $conn->query($query);
            
                if ($result->num_rows > 0) {
                    // Output data of each row.
                    while($row = $result->fetch_assoc()) {
                        echo "firstName: " . $row["firstName"] . " | lastName: " . $row["lastName"] . " | dateTimeOfSymptom: " . $row["dateTimeOfSymptom"] . 
                        " | symptoms: " . $row["symptoms"] . " | testResultDate: " . $row["testResultDate"] . "<br/>";
                    }
                } 
                else {
                    echo "0 results";
                }
                break;
            
            case "10": // Example args input format: 2021-04-17; 2021-04-19
                echo "10. Display all messages generated by the system within a specific period-oftime. <br/><br/>";
                $queryColumns = "SHOW COLUMNS FROM Messages;";
                $resultColumns = $conn->query($queryColumns);

                while ($row = $resultColumns->fetch_assoc()) {
                    $columns[] = $row["Field"];
                }

                if (empty($this->args[0]) && empty($this->args[1])) {
                    echo "No dates entered.";
                    break;
                }

                if (!empty($this->args[0]) && empty($this->args[1])) {
                    $query = "SELECT * FROM Messages WHERE msgDate = '" . $this->args[0] . "' AND Messages.isDeleted=0;";
                }

                else {
                    $query = "SELECT * FROM Messages WHERE msgDate BETWEEN '" . $this->args[0] . "' AND '" . $this->args[1] . "' AND Messages.isDeleted=0;";
                } 
                $result = $conn->query($query);
                if ($result->num_rows > 0) {
                    // Output data of each row.
                    while ($row = $result->fetch_assoc()) {
                        foreach ($columns as $col) {
                            if ($col == "isDeleted") {
                                continue;
                            }
                            echo $col . ": " . $row[$col] . " | ";
                        }
                        echo "<br>";
                    }
                } 
                else {
                    echo "0 results";
                }
        
                break;

            case "11": // Example args input format: 95 Robert St
                echo "11. Give a list of all the People in a specific address. For every person, provide the first name, last name, DOB, medicare card number, 
                telephone number, citizenship, email address, full mother’s name and full father’s name. <br/><br/>";
                $queryColumns = "SHOW COLUMNS FROM Messages;";
                $resultColumns = $conn->query($queryColumns);

                while ($row = $resultColumns->fetch_assoc()) {
                    $columns[] = $row["Field"];
                }

                if (empty($this->args[0])) {
                    echo "No address entered.";
                    break;
                }

                $query = "SELECT c.firstName, c.lastName, c.dateOfBirth, c.medicareNumber, c.phoneNumber, c.citizenship, c.email, GROUP_CONCAT(DISTINCT p.firstName, ' ', p.lastName SEPARATOR ', ') AS Parents
                            FROM Person p
                            INNER JOIN IsParentOf ON IsParentOf.parentId = p.id
                            INNER JOIN Person c ON IsParentOf.childId = c.id
                                AND c.id IN (SELECT LivesAt.personId FROM LivesAt, Address WHERE Address.addressId = LivesAt.addressId AND Address.address = '" . $this->args[0] . "')
                            GROUP BY c.firstName
                            UNION
                            SELECT c.firstName, c.lastName, c.dateOfBirth, c.medicareNumber, c.phoneNumber, c.citizenship, c.email, ('') AS Parents
                            FROM Person c
                            WHERE c.id NOT IN (SELECT IsParentOf.childId FROM IsParentOf)
                                AND c.id IN (SELECT LivesAt.personId FROM LivesAt, Address WHERE Address.addressId = LivesAt.addressId AND Address.address = '" . $this->args[0] . "')
                            GROUP BY c.firstName;";

                $result = $conn->query($query);
                if ($result->num_rows > 0) {
                    // Output data of each row.
                    while($row = $result->fetch_assoc()) {
                        echo "firstName: " . $row["firstName"] . " | lastName: " . $row["lastName"] . " | dateOfBirth: " . $row["dateOfBirth"] . " | medicareNumber: " . $row["medicareNumber"] .
                        " | phoneNumber: " . $row["phoneNumber"] . " | citizenship: " . $row["citizenship"] . " | email: " . $row["email"] . " | Parents: " . $row["Parents"] . "<br/>";
                    }
                } 
                else {
                    echo "0 results";
                }
                break;


            case "12": // Example args input format: No args input
                echo "12. Give a detail list of all facilities (Address, Number of health workers, accept
                walk-in clients or by appointment only, Drive thru capability, etc.).<br/><br/>";               
                $query = "SELECT phc.phcName, phc.phcAddress, (SELECT COUNT(*) FROM 
                    (SELECT DISTINCT PublicHealthWorker.phwId FROM PublicHealthWorker
                    INNER JOIN WorksAt ON WorksAt.phwId = PublicHealthWorker.phwId
                    INNER JOIN PublicHealthCenter ON WorksAt.phcId = PublicHealthCenter.phcId AND PublicHealthCenter.phcName = phc.phcName
                    WHERE PublicHealthWorker.isDeleted = 0
                    ) AS phwList) AS phwCount, phc.methodOfTesting, IF(phc.drivethru=1, 'Available', 'Unavailable') AS 'Drive thru'
                FROM PublicHealthCenter phc
                WHERE phc.isDeleted = 0;";
                $result = $conn->query($query);
            
                if ($result->num_rows > 0) {
                    // Output data of each row.
                    while($row = $result->fetch_assoc()) {
                        echo "phcName: " . $row["phcName"] . " | phcAddress: " . $row["phcAddress"] . " | phwCount: " . $row["phwCount"] . " | methodOfTesting: " . $row["methodOfTesting"] .
                        " | Drive thru: " . $row["Drive thru"] . "<br/>";
                    }
                } 
                else {
                    echo "0 results";
                }
                break;


            case "13": // Example args input format: No args input
                echo "13. Give a detail list of all Regions (Name, list of all cities within the region,
                and a list of all the postal codes within every city).<br/><br/>";               
                $query = "SELECT region, city, GROUP_CONCAT(DISTINCT postalCode SEPARATOR ', ') 'Postal Codes' FROM Address
                            WHERE Address.isDeleted = 0
                            GROUP BY city
                            ORDER BY region;";
                $result = $conn->query($query);
            
                if ($result->num_rows > 0) {
                    // Output data of each row.
                    while($row = $result->fetch_assoc()) {
                        echo "region: " . $row["region"] . " | city: " . $row["city"] . " | Postal Codes: " . $row["Postal Codes"] . "<br/>";
                    }
                } 
                else {
                    echo "0 results";
                }
                break;


            case "14": // Example args input format: 2021-01-10
                echo "14. Give a List of all people who got the result of the test on a specific date (Date of the result of the test) grouped 
                by the test result value (First who got positive result, then who got negative result). The list must include First Name, 
                Last Name, DOB, Phone Number and email address of the diagnosed person. <br/><br/>";               
                
                if (empty($this->args[0])) {
                    echo "No date entered.";
                    break;
                }
                
                $query = "SELECT firstName, lastName, dateOfBirth, phoneNumber, email, testResultDate, testResult FROM Person, Diagnosis
                WHERE Diagnosis.testResultDate = '". $this->args[0] . "' AND Person.id = Diagnosis.personId AND Diagnosis.isDeleted = 0
                ORDER BY testResult ASC;";
                $result = $conn->query($query);
            
                if ($result->num_rows > 0) {
                    // Output data of each row.
                    while($row = $result->fetch_assoc()) {
                        echo "firstName: " . $row["firstName"] . " | lastName: " . $row["lastName"] . " | dateOfBirth: " . $row["dateOfBirth"] . 
                        "phoneNumber: " . $row["phoneNumber"] . " | email: " . $row["email"] . " | testResultDate: " . $row["testResultDate"] . 
                        " | testResult: " . $row["testResult"] . "<br/>";
                    }
                } 
                else {
                    echo "0 results";
                }
                break;


            case "15": // Example args input format: Viau Public Health Center
                echo "15 Give a list of all workers in a specific facility.<br/><br/>";               
                
                if (empty($this->args[0])) {
                    echo "No public health center entered.";
                    break;
                }
                
                $query = "SELECT DISTINCT firstName, lastName, phcName FROM Person
                        INNER JOIN PublicHealthWorker ON Person.id = PublicHealthWorker.phwId 
                        INNER JOIN WorksAt ON WorksAt.phwId = PublicHealthWorker.phwId
                        INNER JOIN PublicHealthCenter ON WorksAt.phcId = PublicHealthCenter.phcId AND PublicHealthCenter.phcName = '" . $this->args[0] . "'
                        WHERE PublicHealthWorker.isDeleted = 0;";
                $result = $conn->query($query);
            
                if ($result->num_rows > 0) {
                    // Output data of each row.
                    while($row = $result->fetch_assoc()) {
                        echo "firstName: " . $row["firstName"] . " | lastName: " . $row["lastName"] . " | phcName: " . $row["phcName"] . "<br/>";
                    }
                } 
                else {
                    echo "0 results";
                }
                break;


            case "16": // Example args input format: 2021-01-10; Viau Public Health Center
                echo " 16. <br/> (1) Give a list of all public health workers who tested positive on a specific date
                in a specific facility. <br/>(2) In addition, provide a list of the employees who worked
                with the infected health workers for the period of fourteen days prior to the
                test. Use the date of the test taken by the infected health worker. 
                ";
                if (empty($this->args[0]) || empty($this->args[1])) {
                    echo "The specific date and/or. the specific facility was not provided.";
                    break;
                }
                // First query
                $firstQuery = "SELECT firstName, lastName, Diagnosis.testResult, Diagnosis.testResultDate, PublicHealthCenter.phcName
                                FROM Person
                                INNER JOIN PublicHealthWorker ON PublicHealthWorker.phwId = Person.id
                                INNER JOIN Diagnosis ON Diagnosis.personId = PublicHealthWorker.phwId
                                INNER JOIN PublicHealthCenter ON PublicHealthCenter.phcId = Diagnosis.phcId
                                WHERE Diagnosis.testResult = 'positive' and Diagnosis.testResultDate = '". $this->args[0] ."' and  PublicHealthCenter.phcName = '". $this->args[1] ."';";
                $resultFirstQuery = $conn->query($firstQuery);
                
                // Second Query
                $today = date_create($this->args[0]);
                $min_date_temp = date_sub($today, date_interval_create_from_date_string('14 days'));
                $min_date = date_format($min_date_temp, 'Y-m-d');
                $secondQuery = "SELECT firstName as employeeFirstName, lastName as employeeLastName, PublicHealthCenter.phcName, WorksAt.startDateTime as workedDateTime
                                FROM Person
                                INNER JOIN WorksAt ON Person.id = WorksAt.phwId
                                INNER JOIN PublicHealthCenter ON PublicHealthCenter.phcId = WorksAt.phcId
                                WHERE PublicHealthCenter.phcName = '". $this->args[1] ."' and WorksAt.startDateTime <= '". $this->args[0] ."' and WorksAt.startDateTime >= '". $min_date ."' 
                                GROUP BY firstName, lastName;";
                $resultSecondQuery = $conn->query($secondQuery);
                if ($resultFirstQuery->num_rows > 0) {
                    // Output data of each row.
                    echo "<br/><br/>Result (1)";
                    while($row = $resultFirstQuery->fetch_assoc()) {
                        echo "<br/> firstName: " . $row["firstName"] . " | lastName: " . $row["lastName"] . " | testResult: " . $row["testResult"] . " | testResultDate: " . $row["testResultDate"] . " | Facility Name: " . $row["phcName"] . "<br/>";
                    }
                } 
                else {
                    echo "0 results for (1)";
                }
                if ($resultSecondQuery->num_rows > 0) {
                    // Output data of each row.
                    echo "<br/><br/>Result (2)";
                    while($row = $resultSecondQuery->fetch_assoc()) {
                        echo "<br/> EmployeeFirstName: " . $row["employeeFirstName"] . " | EmployeeLastName: " . $row["employeeLastName"] . " | Facility Name: " . $row["phcName"] . " | Work shift: " . $row["workedDateTime"] . "<br/>";
                    }
                } 
                else {
                    echo "0 results for (2)";
                }

                break;

            case "17": // Example args input format: 2020-12-15; 2021-02-04
                echo "17. <br/>(1) For all regions, provide a report that include the region name, the number
                of people who have positive results, the number of people who have
                negative results and a (2) history of alerts within a specific period-of-time.<br/>";
                
                if (empty($this->args[0]) || empty($this->args[1])) {
                    echo "The date interval was not correctly provided.";
                    break;
                }
                
                // (1)
                $query = "SELECT region as RegionName, 
                        SUM(case when listOfPositives.testResult = 'positive' then 1 else 0 end) as PositiveCases, 
                        SUM(case when listOfPositives.testResult = 'negative' then 1 else 0 end) as NegativeCases 
                        FROM (
                        SELECT DISTINCT Address.region, Diagnosis.personId, testResult FROM Diagnosis 
                        INNER JOIN LivesAt ON Diagnosis.personId = LivesAt.personId 
                        INNER JOIN Address ON Address.addressId = LivesAt.addressId
                        where testResultDate >= '". $this->args[0] ."' AND testResultDate <= '". $this->args[1] ."'
                        ) as listOfPositives
                        GROUP BY region;";
                $result = $conn->query($query);
            
                if ($result->num_rows > 0) {
                    echo "<br/>Result (1)<br/>";
                    // Output data of each row.
                    while($row = $result->fetch_assoc()) {
                        echo "Region Name: " . $row["RegionName"] . " | Number of positive cases: " . $row["PositiveCases"] . " | Number of negative cases: " . $row["NegativeCases"] . "<br/>";
                    }
                } 
                else {
                    echo "0 results";
                }

                // (2)
                $query = "SELECT * 
                            FROM Region 
                            WHERE alertDate BETWEEN '" . $this->args[0] . "' AND '" . $this->args[1] . "' AND isDeleted=0
                            ORDER BY alertDate;";
                            $result = $conn->query($query);
            
                if ($result->num_rows > 0) {
                    echo "<br/>Result (2)<br/>";
                    // Output data of each row.
                    while($row = $result->fetch_assoc()) {
                        echo "Region Name: " . $row["region"] . " | Alert state: " . $row["alertState"] . " | Alert date: " . $row["alertDate"] . "<br/>";
                    }
                } 
                else {
                    echo "<br/>0 results";
                }

                

                break;

            default;

        }

    }
}
    



if (isset($_POST["command"])) new QueriesCommand();
?>
